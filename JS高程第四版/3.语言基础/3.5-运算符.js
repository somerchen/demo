// 位操作符
// 按位非,按位非操作符用波浪符（~）表示，它的作用是返回数值的一补数
let num1 = 25;      // 二进制00000000000000000000000000011001
let num2 = ~num1;   // 二进制11111111111111111111111111100110
console.log(num2);  // -26
// 由此可以看出，按位非的最终效果是对数值取反并减1
let num1 = 25;
let num2 = -num1 - 1;
console.log(num2);   // "-26"
// 位操作的速度快得多。这是因为位操作是在数值的底层表示上完成的

// 按位与 &
// 按位与操作在两个位都是1时返回1，在任何一位是0时返回0。
let result = 25 & 3;
console.log(result); // 1
//  25 = 0000 0000 0000 0000 0000 0000 0001 1001
//   3 = 0000 0000 0000 0000 0000 0000 0000 0011
// ---------------------------------------------
// AND = 0000 0000 0000 0000 0000 0000 0000 0001

// 按位或 |
// 按位或操作在至少一位是1时返回1，两位都是0时返回0。
let result = 25 | 3;
console.log(result); // 27
//  25 = 0000 0000 0000 0000 0000 0000 0001 1001
//   3 = 0000 0000 0000 0000 0000 0000 0000 0011
// ---------------------------------------------
//  OR = 0000 0000 0000 0000 0000 0000 0001 1011
 
// 按位异或 ^
// 按位异或与按位或的区别是，它只在一位上是1的时候返回1（两位都是1或0，则返回0）
let result = 25 ^ 3;
console.log(result); // 26
//  25 = 0000 0000 0000 0000 0000 0000 0001 1001
//   3 = 0000 0000 0000 0000 0000 0000 0000 0011
// ---------------------------------------------
// XOR = 0000 0000 0000 0000 0000 0000 0001 1010

// 左移 <<
let oldValue = 2;              // 等于二进制10
let newValue = oldValue << 5;  // 等于二进制1000000，即十进制64

// 有符号右移 >>
let oldValue = 64;             // 等于二进制1000000
let newValue = oldValue >> 5;  // 等于二进制10，即十进制2

// 无符号右移 >>>
let oldValue = 64;              // 等于二进制1000000
let newValue = oldValue >>> 5;  // 等于二进制10，即十进制2

let oldValue = -64;              // 等于二进制11111111111111111111111111000000
let newValue = oldValue >>> 5;   // 等于十进制134217726


// 布尔操作符 ! && ||

// 一元操作符
// ++ -- + - * / % 

// 指数操作符 **
console.log(Math.pow(3, 2);    // 9
console.log(3 ** 2);           // 9

console.log(Math.pow(16, 0.5); // 4
console.log(16** 0.5);         // 4

// 关系操作符 > < >= <=

// 相等操作符 == != === !==
// 强制类型转换
// 如果任一操作数是布尔值，则将其转换为数值再比较是否相等。false转换为0，true转换为1。
// 如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等。
// 如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()方法取得其原始值，再根据前面的规则进行比较。
// null和undefined相等。
// null和undefined不能转换为其他类型的值再进行比较。
// 如果有任一操作数是NaN，则相等操作符返回false，不相等操作符返回true。记住：即使两个操作数都是NaN，相等操作符也返回false，因为按照规则，NaN不等于NaN。
// 如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true。否则，两者不相等。